var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var angular2_1 = require('angular2/angular2');
var CarouselSlide = (function () {
    function CarouselSlide(el) {
        this._itemClass = true;
        this._el = el.nativeElement;
    }
    CarouselSlide.prototype.getElement = function () {
        return this._el;
    };
    CarouselSlide.prototype.activate = function () { this._activeClass = true; };
    CarouselSlide.prototype.deactivate = function () { this._activeClass = false; };
    CarouselSlide.prototype.prepareAnimation = function (isToRight) {
        isToRight ? this._nextClass = true : this._prevClass = true;
    };
    CarouselSlide.prototype.animate = function (isToRight) {
        isToRight ? this._leftClass = true : this._rightClass = true;
    };
    CarouselSlide.prototype.cleanAfterAnimation = function () {
        this._leftClass = this._rightClass = this._nextClass = this._prevClass = false;
    };
    CarouselSlide = __decorate([
        angular2_1.Directive({
            selector: 'carousel-slide',
            host: {
                '[class.item]': '_itemClass',
                '[class.active]': '_activeClass',
                '[class.left]': '_leftClass',
                '[class.right]': '_rightClass',
                '[class.prev]': '_prevClass',
                '[class.next]': '_nextClass',
                'role': 'listbox'
            }
        }), 
        __metadata('design:paramtypes', [angular2_1.ElementRef])
    ], CarouselSlide);
    return CarouselSlide;
})();
exports.CarouselSlide = CarouselSlide;
var CarouselCaption = (function () {
    function CarouselCaption() {
        this.carouselCaptionClass = true;
    }
    CarouselCaption = __decorate([
        angular2_1.Directive({
            selector: 'carousel-caption',
            host: {
                '[class.carousel-caption]': 'carouselCaptionClass'
            }
        }), 
        __metadata('design:paramtypes', [])
    ], CarouselCaption);
    return CarouselCaption;
})();
exports.CarouselCaption = CarouselCaption;
var Carousel = (function () {
    function Carousel(query, el) {
        var _this = this;
        this.pause = "hover";
        this.indexchange = new angular2_1.EventEmitter();
        this.slidestart = new angular2_1.EventEmitter();
        this.slideend = new angular2_1.EventEmitter();
        this._activeIndex = -1;
        this._interval = 5000;
        this._isChangingSlide = false;
        this._isToRight = true;
        this._noTransition = false;
        this._slides = [];
        this._timerId = null;
        this._transitionEnd = getTransitionEnd();
        this._wrap = true;
        this._el = el;
        this._startCycling();
        query.onChange(function () {
            _this._registerSlides(query);
        });
    }
    Carousel.prototype._registerSlides = function (query) {
        var activeSlide = this._slides[this._activeIndex];
        this._slides = [];
        var activationDone = false;
        for (var i = 0; i < query.length; i++) {
            var slide = query._results[i];
            slide.deactivate();
            slide.cleanAfterAnimation();
            if (slide === activeSlide || (typeof activeSlide === "undefined" && this._activeIndex == this._slides.length)) {
                slide.activate();
                if (this._activeIndex !== this._slides.length) {
                    if (typeof this._activeIndex != "string") {
                        this.indexchange.next(this._slides.length);
                    }
                    this._activeIndex = this._slides.length;
                }
                activationDone = true;
            }
            this._slides.push(slide);
        }
        if (!activationDone) {
            this._slides[0].activate();
            this._activeIndex = 0;
            this.indexchange.next(this._activeIndex);
        }
        this._isChangingSlide = false;
        this._isToRight = null;
    };
    Object.defineProperty(Carousel.prototype, "wrap", {
        set: function (newValue) {
            this._wrap = typeof newValue === "string" ? newValue != "false" : newValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "noTransition", {
        set: function (newValue) {
            this._noTransition = typeof newValue === "string" ? newValue != "false" : newValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "interval", {
        set: function (newValue) {
            this._interval = typeof newValue === "string" ? parseInt(newValue) : newValue;
            this._stopCycling();
            this._startCycling();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "index", {
        set: function (newValue) {
            var _this = this;
            if (!this._isChangingSlide && newValue != this._activeIndex && newValue >= 0 && newValue <= this._slides.length - 1) {
                this._isChangingSlide = true;
                if (this._isToRight == null) {
                    this._isToRight = newValue > this._activeIndex;
                }
                this.slidestart.next(null);
                var currentSlide = this._slides[this._activeIndex];
                var nextSlide = this._slides[newValue];
                if (!this._noTransition && this._transitionEnd && currentSlide) {
                    nextSlide.prepareAnimation(this._isToRight);
                    setTimeout(function () {
                        currentSlide.animate(_this._isToRight);
                        nextSlide.animate(_this._isToRight);
                        var endAnimationCallback = function (event) {
                            currentSlide.getElement().removeEventListener(_this._transitionEnd, endAnimationCallback, false);
                            _this._finalizeTransition(currentSlide, nextSlide, newValue);
                        };
                        currentSlide.getElement().addEventListener(_this._transitionEnd, endAnimationCallback, false);
                    }, 30);
                }
                else {
                    this._finalizeTransition(currentSlide, nextSlide, newValue);
                }
            }
            else if (this._activeIndex == -1) {
                this._finalizeTransition(null, null, newValue);
                this._el.parentView._view.changeDetector.detectChanges();
            }
        },
        enumerable: true,
        configurable: true
    });
    Carousel.prototype._finalizeTransition = function (currentSlide, nextSlide, newValue) {
        if (currentSlide) {
            currentSlide.deactivate();
            currentSlide.cleanAfterAnimation();
        }
        if (nextSlide) {
            nextSlide.activate();
            nextSlide.cleanAfterAnimation();
        }
        this._activeIndex = newValue;
        this._isChangingSlide = false;
        this._isToRight = null;
        if (currentSlide || nextSlide) {
            this.slideend.next(null);
            this.indexchange.next(this._activeIndex);
        }
    };
    Carousel.prototype.navigateTo = function (newIndex) {
        this.index = newIndex;
    };
    Carousel.prototype.prev = function () {
        if (this.hasPrev()) {
            var prevIndex = this._activeIndex - 1 < 0 ? this._slides.length - 1 : this._activeIndex - 1;
            this._isToRight = false;
            this.index = prevIndex;
        }
    };
    Carousel.prototype.next = function () {
        if (this.hasNext()) {
            var nextIndex = (this._activeIndex + 1) % this._slides.length;
            this._isToRight = true;
            this.index = nextIndex;
        }
    };
    Carousel.prototype.hasPrev = function () {
        return this._slides.length > 1 && !(!this._wrap && this._activeIndex === 0);
    };
    Carousel.prototype.hasNext = function () {
        return this._slides.length > 1 && !(!this._wrap && this._activeIndex === (this._slides.length - 1));
    };
    Carousel.prototype.toggleAutomaticSliding = function () {
        if (this.pause === "hover") {
            if (this._timerId) {
                this._stopCycling();
            }
            else {
                this._startCycling();
            }
        }
    };
    Carousel.prototype._startCycling = function () {
        var _this = this;
        if (this._interval >= 0) {
            this._timerId = setInterval(function () {
                _this.next();
            }, this._interval > 600 ? this._interval : 600);
        }
    };
    Carousel.prototype._stopCycling = function () {
        if (this._timerId) {
            clearInterval(this._timerId);
        }
        this._timerId = null;
    };
    Carousel = __decorate([
        angular2_1.Component({
            selector: 'carousel',
            properties: [
                'index',
                'wrap',
                'interval',
                'pause',
                'noTransition: no-transition'
            ],
            host: {
                '(mouseenter)': 'toggleAutomaticSliding()',
                '(mouseleave)': 'toggleAutomaticSliding()'
            },
            events: ['indexchange', 'slidestart', 'slideend']
        }),
        angular2_1.View({
            templateUrl: './ng2-bootstrap/carousel/carousel.html',
            directives: [angular2_1.NgFor, angular2_1.NgIf]
        }),
        __param(0, angular2_1.Query(CarouselSlide)), 
        __metadata('design:paramtypes', [angular2_1.QueryList, angular2_1.ElementRef])
    ], Carousel);
    return Carousel;
})();
exports.Carousel = Carousel;
function getTransitionEnd() {
    var el = document.createElement('angular2-bootstrap');
    var transEndEventNames = {
        WebkitTransition: 'webkitTransitionEnd',
        MozTransition: 'transitionend',
        OTransition: 'oTransitionEnd otransitionend',
        transition: 'transitionend'
    };
    for (var name in transEndEventNames) {
        if (el.style[name] !== undefined) {
            return transEndEventNames[name];
        }
    }
    return null;
}

//# sourceMappingURL=data:application/json;base64,